{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","href","action","method","type","name","required","id","value","for","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","renderReactDom","ReactDOM","render","src_App","document","getElementById","cordova","addEventListener","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4IC0DzBC,MAtDf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,aACJJ,EAAAC,EAAAC,cAAA,6BAIZF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,QAAMG,OAAO,IAAIC,OAAO,QACpBN,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,KAAK,OAAOC,SAAS,KACxCT,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,WAAWC,KAAK,WAAWC,SAAS,KAChDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,SACIK,KAAK,WACLG,GAAG,QACHC,MAAM,KAEVX,EAAAC,EAAAC,cAAA,SAAOU,IAAI,SACPZ,EAAAC,EAAAC,cAAA,aADJ,mBAIJF,EAAAC,EAAAC,cAAA,UACK,IACDF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,sBAIRJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,MAEJH,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAASI,MAAM,aAE/BX,EAAAC,EAAAC,cAAA,wCAEIF,EAAAC,EAAAC,cAAA,KACIE,KAAK,iBACLD,UAAU,0BAET,UCrCdU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxClB,EAAAmB,EAAA,GAAAC,KAAApB,EAAAqB,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCIMW,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCTZ,IAAMC,EAAiB,WACnBC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,UAGjDT,OAAOU,QACPF,SAASG,iBACL,cACA,WACIP,MAEJ,GAGJA,ID8GI,kBAAmBQ,WACnBA,UAAUC,cAAcC,MACnBvB,KAAK,SAACwB,GACHA,EAAaC,eAEhBC,MAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,WC1GpCjC","file":"static/js/main.bc296c69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div className=\"mfp-content\">\n            <div className=\"login-modal\">\n                <div className=\"booking-info\">\n                    <h3>\n                        <a href=\"main.html\">\n                            <span>TripBudget</span>\n                        </a>\n                    </h3>\n                </div>\n                <div className=\"login-form\">\n                    <form action=\"#\" method=\"post\">\n                        <p>User Name </p>\n                        <input type=\"text\" name=\"Name\" required=\"\" />\n                        <p>User Password</p>\n                        <input type=\"password\" name=\"Password\" required=\"\" />\n                        <div className=\"wthree-text\">\n                            <ul>\n                                <li>\n                                    <input\n                                        type=\"checkbox\"\n                                        id=\"brand\"\n                                        value=\"\"\n                                    />\n                                    <label for=\"brand\">\n                                        <span></span> Remember me ?\n                                    </label>\n                                </li>\n                                <li>\n                                    {' '}\n                                    <a href=\"#\">Forgot password?</a>\n                                </li>\n                            </ul>\n\n                            <div className=\"clear\"> </div>\n                        </div>\n                        <input type=\"submit\" value=\"Sign In\" />\n                    </form>\n                    <p>\n                        Donâ€™t have an account ?\n                        <a\n                            href=\"#small-dialog1\"\n                            className=\"sign-in popup-top-anim\"\n                        >\n                            {' '}\n                        </a>\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\n            'Service-Worker': 'script',\n        },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst renderReactDom = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n};\n\nif (window.cordova) {\n    document.addEventListener(\n        'deviceready',\n        () => {\n            renderReactDom();\n        },\n        false\n    );\n} else {\n    renderReactDom();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}